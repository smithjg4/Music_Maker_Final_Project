//Music Maker
//Author: Joshua Smith
//This program reads in values from a 3-axis gyroscope
//and various sensors and uses them to create music via a theremin type
//device and various songs. LEDs indicate the mode and flash in time with
//the song.
//Tilt tone mode:
//Gyroscope x-axis: changes pitch or frequency of note
//Push button: changes between discrete pitch and continuous frequency mode
//Song mode:
//Photoresistor: Halloween Theme song
//Thermistor: Hot Cross Buns
//IR Sensor: Crazy Train
//Gyroscope y-axis: changes tempo of current song
//
//The portion of this program related to setting up
//and using the gyroscope was borrowed from the following
//source: http://bildr.org/2011/06/l3g4200d-arduino/

//Arduino 1.0+ only

//Borrowed code//////////////////////////////////////////////////////////////
#include <Wire.h>

#define CTRL_REG1 0x20
#define CTRL_REG2 0x21
#define CTRL_REG3 0x22
#define CTRL_REG4 0x23
#define CTRL_REG5 0x24

int L3G4200D_Address = 105; //I2C address of the L3G4200D

int x;
int y;
int z;
// End of borrowed code//////////////////////////////////////////////////////

int xzero;                            // calibrated x value
int yzero;                            // calibrated y value
int sens = 60;                        // x-axis sensitivity
int minfreq = 10;                     // minimum frequency
int maxfreq = 300;                    // maximum frequency
int freq = (maxfreq - minfreq) / 2;   // initializes frequency halfway
int freqincr = 5;                     // frequncy increment
int mode = 0;                         // buzzer mode defaults to descrete notes
int start = 0;                        // counter variable used to prevent switch bounce
int tempo = 20;                       // tempo of song in number of delays
int tempo_sens = 100;                 // tempo change sensitivty
bool lock = false;                    // locks in song when true
int temp_int;                         // initial tempo value

// Pin values
int RED = 5;                          // red LED
int YELLOW = 6;                       // yellow LED
int GREEN = 7;                        // green LED
int BUTTON = 4;                       // push button
int BUZZER = 9;                       // buzzer
int IR = 10;                          // IR sensor
int PHOTO = A0;                       // photoresistor
int THERM = A1;                       // thermistor

// Array of notes from C4 to C5
int note[] = {262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523};
int pitch = sizeof(note) / 2;         // initializes pitch halfway

bool clock = false;                   // clock that pulses true every millisecond
int time1 = 0;                        // initial clock time
int time2 = 0;                        // final clock time
int count = 0;                        // duration of song; resets at zero for new song
int index = 0;                        // index of song array

// Halloween Theme song
int halloween[] = {note[8], note[1], note[1], note[8], note[1], note[1], note[9], note[1],
                   note[8], note[1], note[1], note[8], note[1], note[1], note[9], note[1],
                   note[7], note[0], note[0], note[7], note[0], note[0], note[8], note[0],
                   note[7], note[0], note[0], note[7], note[0], note[0], note[8], note[0]
                  };

// Hot Cross Buns
int hot[] = {note[4], note[4], note[2], note[2], note[0], note[0], 0, 0,
             note[4], note[4], note[2], note[2], note[0], note[0], 0, 0,
             note[0], note[0], note[0], note[0], note[2],  note[2],  note[2],  note[2],
             note[4], note[4], note[2], note[2], note[0], note[0], 0, 0
            };

// Crazy Train
int crazy[] = {note[2], note[2], note[9], note[2], note[10], note[2], note[9], note[2],
               note[7], note[5], note[4], note[5], note[7], note[5], note[4], note[0]
              };


void setup() {

  Wire.begin();
  Serial.begin(9600);

  Serial.println("starting up L3G4200D");
  setupL3G4200D(2000); // Configure L3G4200  - 250, 500 or 2000 deg/sec

  delay(1500); //wait for gyroscope to be ready

  // Calibrate gyroscope from level surface
  getGyroValues();
  xzero = x;
  yzero = y;

  // Initialize pins
  pinMode(BUZZER, OUTPUT);
  pinMode(RED, OUTPUT);
  pinMode(YELLOW, OUTPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(BUTTON, INPUT);
  digitalWrite(BUTTON, HIGH);    // Activates pull-up resistor for push button
  pinMode(IR, INPUT);

  temp_int = analogRead(THERM);  // initial temperature reading
}




void loop() {

  // pulses clock every 10 ms
  time2 = millis();
  if (time2 - time1 >= 10) {
    time1 = time2;
    clock = true;
  } else {
    clock = false;
  }

  // switches tilt tone mode with push button
  if (digitalRead(BUTTON) == 0 && !lock ) {
    if (abs(millis() - start) >= 200) {  // Prevents switch bounce
      if (mode == 0) {
        mode = 1;
      } else {
        mode = 0;
      }
      start = millis();
    }
    delay(80);
  }

  getGyroValues();  // updates x, y, and z with new values

  // Increments frequency when tilted forward
  if (x > xzero + sens && freq < maxfreq) {
    freq = freq + freqincr;
  }

  // Decrements frequency when tilted backward
  else if (x < xzero - sens && freq > minfreq) {
    freq = freq - freqincr;
  }


  // Discrete note mode indicated by red LED
  if (mode == 0) {
    tone(BUZZER, note[pitch]);
    digitalWrite(RED, HIGH);
    digitalWrite(YELLOW, LOW);
    digitalWrite(GREEN, LOW);
    delay(10);
  }

  // Continuous frequency mode indicated by green LED
  if (mode == 1) {
    tone(BUZZER, freq);
    digitalWrite(RED, LOW);
    digitalWrite(YELLOW, LOW);
    digitalWrite(GREEN, HIGH);
    delay(10);
  }


  // Read Inputs//////////////////////////////////////////////////////////////////////////////////////////////////////////////
  if (clock) { // prevents gyroscope value from changing too quickly

    // tilting y axis back decrements tempo
    if (y < yzero - tempo_sens && tempo > 10) {
      tempo--;
    }

    // tilting y axis forward increments tempo
    if (y > yzero + tempo_sens && tempo < 100) {
      tempo++;
    }


    // Photoresistor condition to start Halloween Theme song
    if (!lock && analogRead(PHOTO) > 550) {
      lock = true;
      mode = 2;
      count = 0;  //resets count so song start at beginning
    }

    // Thermistor condition to start Hot Cross Buns
    if (!lock && (analogRead(THERM) - temp_int) > 20) {
      lock = true;
      mode = 3;
      count = 0;  //resets count so song start at beginning
    }

    // IR condition to start Crazy Train
    if (!lock && digitalRead(IR) == 0) {
      lock = true;
      mode = 4;
      count = 0;  //resets count so song start at beginning
    }

  }



  // Increments pitch when tilted forward
  if (x > xzero + sens * 10 && pitch < sizeof(note) - 1) {
    pitch++;
    delay(10);
  }

  // Decrements pitch when tilted backward
  else if (x < xzero - sens * 10 && pitch > 0) {
    pitch--;
    delay(10);
  }

  // controls song playback
  if (clock) {
    count++;
    // Halloween theme song
    if (mode == 2) {
      if (count < tempo) {
        tone(BUZZER, halloween[index]);

        // pulses LEDs to music
        if (halloween[index] < 300) {
          digitalWrite(RED, HIGH);
          digitalWrite(YELLOW, LOW);
          digitalWrite(GREEN, LOW);
        } else if (halloween[index] > 370) {
          digitalWrite(RED, LOW);
          digitalWrite(YELLOW, LOW);
          digitalWrite(GREEN, HIGH);
        } else {
          digitalWrite(RED, LOW);
          digitalWrite(YELLOW, HIGH);
          digitalWrite(GREEN, LOW);
        }


      } else {
        noTone(BUZZER);
        count = 0;
        if (index < sizeof(halloween) / sizeof(int) - 1) {
          index++;
        } else {
          index = 0;
          lock = false;
          mode = 0;
        }
      }
    } // End of Halloween

    // Hot Cross Buns
    if (mode == 3) {
      if (count < tempo) {
        if (hot[index] != 0) {
          tone(BUZZER, hot[index]);

          // pulses LEDs to music
          if (hot[index] < 300) {
            digitalWrite(RED, HIGH);
            digitalWrite(YELLOW, LOW);
            digitalWrite(GREEN, LOW);
          } else if (hot[index] > 370) {
            digitalWrite(RED, LOW);
            digitalWrite(YELLOW, LOW);
            digitalWrite(GREEN, HIGH);
          } else {
            digitalWrite(RED, LOW);
            digitalWrite(YELLOW, HIGH);
            digitalWrite(GREEN, LOW);
          }

        } else {
          noTone(BUZZER);
        }
      } else {
        noTone(BUZZER);
        count = 0;
        if (index < sizeof(hot) / sizeof(int) - 1) {
          index++;
        } else {
          index = 0;
          lock = false;
          mode = 0;
        }
      }
    } // End of Hot Cross Buns

    // Crazy Train
    if (mode == 4) {
      if (count < tempo) {
        tone(BUZZER, crazy[index]);

        // pulses LEDs to music
        if (crazy[index] < 300) {
          digitalWrite(RED, HIGH);
          digitalWrite(YELLOW, LOW);
          digitalWrite(GREEN, LOW);
        } else if (crazy[index] > 370) {
          digitalWrite(RED, LOW);
          digitalWrite(YELLOW, LOW);
          digitalWrite(GREEN, HIGH);
        } else {
          digitalWrite(RED, LOW);
          digitalWrite(YELLOW, HIGH);
          digitalWrite(GREEN, LOW);
        }

      } else {
        noTone(BUZZER);
        count = 0;
        if (index < sizeof(crazy) / sizeof(int) - 1) {
          index++;
        } else {
          index = 0;
          lock = false;
          mode = 0;
        }
      }
    } // End of Crazy Train
  }
}


//Borrowed function used to update gyroscope input values//////////////////////////////////////////////////////
void getGyroValues() {

  byte xMSB = readRegister(L3G4200D_Address, 0x29);
  byte xLSB = readRegister(L3G4200D_Address, 0x28);
  x = ((xMSB << 8) | xLSB);

  byte yMSB = readRegister(L3G4200D_Address, 0x2B);
  byte yLSB = readRegister(L3G4200D_Address, 0x2A);
  y = ((yMSB << 8) | yLSB);

  byte zMSB = readRegister(L3G4200D_Address, 0x2D);
  byte zLSB = readRegister(L3G4200D_Address, 0x2C);
  z = ((zMSB << 8) | zLSB);
}

int setupL3G4200D(int scale) {
  //From  Jim Lindblom of Sparkfun's code

  // Enable x, y, z and turn off power down:
  writeRegister(L3G4200D_Address, CTRL_REG1, 0b00001111);

  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
  writeRegister(L3G4200D_Address, CTRL_REG2, 0b00000000);

  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  writeRegister(L3G4200D_Address, CTRL_REG3, 0b00001000);

  // CTRL_REG4 controls the full-scale range, among other things:

  if (scale == 250) {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00000000);
  } else if (scale == 500) {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00010000);
  } else {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00110000);
  }

  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  writeRegister(L3G4200D_Address, CTRL_REG5, 0b00000000);
}

void writeRegister(int deviceAddress, byte address, byte val) {
  Wire.beginTransmission(deviceAddress); // start transmission to device
  Wire.write(address);       // send register address
  Wire.write(val);         // send value to write
  Wire.endTransmission();     // end transmission
}

int readRegister(int deviceAddress, byte address) {

  int v;
  Wire.beginTransmission(deviceAddress);
  Wire.write(address); // register to read
  Wire.endTransmission();

  Wire.requestFrom(deviceAddress, 1); // read a byte

  while (!Wire.available()) {
    // waiting
  }

  v = Wire.read();
  return v;
}
// End of borrowed code//////////////////////////////////////////////////////////////////////////////////////
